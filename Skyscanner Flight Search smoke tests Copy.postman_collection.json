{
	"info": {
		"_postman_id": "c94a09fb-eeac-48bd-b771-4753c3978345",
		"name": "Skyscanner Flight Search smoke tests Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List Places",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6d9857c6-ada2-4dcf-bd90-6cb779dadeed",
						"exec": [
							"pm.test(\"Has status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Has valid JSON schema\", function() {\r",
							"    var schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"Places\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                    \"type\": \"object\",\r",
							"                    \"properties\": {\r",
							"                        \"PlaceId\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"PlaceName\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"CountryId\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"RegionId\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"CityId\": {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        \"CountryName\": {\r",
							"                            \"type\": \"string\"\r",
							"                        }\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Results are filtered by query\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    for (var i = 0; i < places.length; i++) {\r",
							"        var place = places[i];\r",
							"        pm.expect(place.PlaceName).to.have.string('Stockholm');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Results are localized\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    for (var i = 0; i < places.length; i++) {\r",
							"        var place = places[i];\r",
							"        pm.expect(place.CountryName).to.equal('Schweden');\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-RapidAPI-Key",
						"type": "text",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2"
					},
					{
						"key": "x-rapidapi-host",
						"type": "text",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com"
					},
					{
						"key": "useQueryString",
						"type": "text",
						"value": "true"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/UK/GBP/de-DE/?query=Stockholm",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"autosuggest",
						"v1.0",
						"UK",
						"GBP",
						"de-DE",
						""
					],
					"query": [
						{
							"key": "query",
							"value": "Stockholm"
						},
						{
							"key": "query",
							"value": "New York",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Browse Quotes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93005f53-70de-4ee7-93de-894223627a77",
						"exec": [
							"pm.test(\"Has status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"\r",
							"});  \r",
							"pm.test(\"To have a valid JSON\", function () {\r",
							"    var schema ={\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"Quotes\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"QuoteId\":{\r",
							"                        \"type\":\"integer\"\r",
							"                    },\r",
							"                    \"MinPrice\":{\r",
							"                        \"type\":\"integer\"\r",
							"                    },\r",
							"                    \"Direct\":{\r",
							"                        \"type\":\"boolean\"\r",
							"                    },\r",
							"                    \"OutboundLeg\":{\r",
							"                        \"type\":\"object\",\r",
							"                        \"properties\":{\r",
							"                            \"CarrierIds\":{\r",
							"                                \"type\":\"array\",\r",
							"                                \"items\":{\r",
							"                                    \"type\":\"integer\"\r",
							"                                }\r",
							"                            },\r",
							"                            \"OriginId\":{\r",
							"                                \"type\":\"integer\"\r",
							"                            },\r",
							"                            \"DestinationId\":{\r",
							"                                \"type\":\"integer\"\r",
							"                            },\r",
							"                            \"DepartureDate\":{\r",
							"                                \"type\":\"string\",\r",
							"                                \r",
							"                            }\r",
							"                        }\r",
							"                    },\r",
							"                    \"InboundLeg\":{\r",
							"                        \"type\":\"object\",\r",
							"                        \"properties\":{\r",
							"                            \"CarrierIds\":{\r",
							"                                  \"type\":\"array\",\r",
							"                                  \"items\":{\r",
							"                                      \"type\":\"integer\"\r",
							"                                  } \r",
							"                             },\r",
							"                             \"OriginId\":{\r",
							"                                 \"type\":\"integer\"\r",
							"                             },\r",
							"                             \"DestinationId\":{\r",
							"                                 \"type\":\"integer\"\r",
							"                             },\r",
							"                             \"DepartureDate\":{\r",
							"                                 \"type\":\"string\"\r",
							"                             }\r",
							"                           \r",
							"                        }\r",
							"                    },\r",
							"                    \"QuotesDateTime\":{\r",
							"                        \"type\":\"string\",\r",
							"                        \r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"Places\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"PlaceId\":{\r",
							"                        \"type\":\"integer\"\r",
							"                        },\r",
							"                        \"IataCode\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"Name\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"Type\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"SkyscannerCode\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"CityName\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"CityId\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"CountryName\":{\r",
							"                        \"type\":\"string\"\r",
							"                        }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"Carriers\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"CarrierId\":{\r",
							"                        \"type\":\"integer\"\r",
							"                    },\r",
							"                    \"Name\":{\r",
							"                        \"type\":\"string\"\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"Currencies\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"Code\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"Symbol\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"ThousandsSeparator\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"DecimalSeparator\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"SymbolOnLeft\":{\r",
							"                        \"type\":\"boolean\"\r",
							"                        },\r",
							"                        \"SpaceBetweenAmountAndSymbol\":{\r",
							"                        \"type\":\"boolean\"\r",
							"                        },\r",
							"                        \"RoundingCoefficient\":{\r",
							"                        \"type\":\"integer\"\r",
							"                        },\r",
							"                        \"DecimalDigits\":{\r",
							"                        \"type\":\"integer\"\r",
							"                        }\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Results are localized per given locale param \", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    for (var i = 0; i < places.length; i++) {\r",
							"        var place = places[i];\r",
							"        pm.expect(place.CountryName).to.equal('United States');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Results are filtered by origin place\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    var place = places[1];\r",
							"pm.expect(place.IataCode).to.have.string('SFO');\r",
							"var quotes = jsonData.Quotes;\r",
							"for (var i = 0; i < quotes.length; i++) {\r",
							"    pm.expect(quotes[i].OutboundLeg.OriginId).to.equal(place.PlaceId);\r",
							"}\r",
							"});\r",
							"\r",
							"pm.test(\"Results are filtered by destintaion place\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    var place = places[0];\r",
							"pm.expect(place.SkyscannerCode).to.have.string('JFK');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-key",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2",
						"type": "text"
					},
					{
						"key": "x-rapidapi-host",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com",
						"type": "text"
					},
					{
						"key": "useQueryString",
						"value": "true",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/USD/en-US/SFO-sky/JFK-sky/2020-07-20?inboundpartialdate=2020-12-01",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"browsequotes",
						"v1.0",
						"US",
						"USD",
						"en-US",
						"SFO-sky",
						"JFK-sky",
						"2020-07-20"
					],
					"query": [
						{
							"key": "inboundpartialdate",
							"value": "2020-12-01"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Browse Routes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f83d1bc9-f711-4440-a711-dba6a5777ded",
						"exec": [
							"pm.test(\"Has status 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"To have a valid JSON\", function () {\r",
							"    var schema={\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"Routes\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {}\r",
							"      },\r",
							"      \"Quotes\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": [\r",
							"          {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"QuoteId\": {\r",
							"                \"type\": \"integer\"\r",
							"              },\r",
							"              \"MinPrice\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"Direct\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"OutboundLeg\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                  \"CarrierIds\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                      {\r",
							"                        \"type\": \"integer\"\r",
							"                      }\r",
							"                    ]\r",
							"                  },\r",
							"                  \"OriginId\": {\r",
							"                    \"type\": \"integer\"\r",
							"                  },\r",
							"                  \"DestinationId\": {\r",
							"                    \"type\": \"integer\"\r",
							"                  },\r",
							"                  \"DepartureDate\": {\r",
							"                    \"type\": \"string\"\r",
							"                  }\r",
							"                },\r",
							"                \"required\": [\r",
							"                  \"CarrierIds\",\r",
							"                  \"OriginId\",\r",
							"                  \"DestinationId\",\r",
							"                  \"DepartureDate\"\r",
							"                ]\r",
							"              },\r",
							"              \"QuoteDateTime\": {\r",
							"                \"type\": \"string\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"QuoteId\",\r",
							"                \"MinPrice\",\r",
							"                \"Direct\",\r",
							"                \"OutboundLeg\",\r",
							"                \"QuoteDateTime\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"Places\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"PlaceId\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"IataCode\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"Name\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"Type\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"SkyscannerCode\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"CityName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"CityId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"CountryName\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"PlaceId\",\r",
							"                \"IataCode\",\r",
							"                \"Name\",\r",
							"                \"Type\",\r",
							"                \"SkyscannerCode\",\r",
							"                \"CityName\",\r",
							"                \"CityId\",\r",
							"                \"CountryName\"\r",
							"              ]\r",
							"            }\r",
							"            \r",
							"          ]\r",
							"        },\r",
							"        \"Carriers\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"CarrierId\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"Name\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"CarrierId\",\r",
							"                \"Name\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"Currencies\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"Code\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"Symbol\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"ThousandsSeparator\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"DecimalSeparator\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"SymbolOnLeft\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"SpaceBetweenAmountAndSymbol\": {\r",
							"                  \"type\": \"boolean\"\r",
							"                },\r",
							"                \"RoundingCoefficient\": {\r",
							"                  \"type\": \"integer\"\r",
							"                },\r",
							"                \"DecimalDigits\": {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"Code\",\r",
							"                \"Symbol\",\r",
							"                \"ThousandsSeparator\",\r",
							"                \"DecimalSeparator\",\r",
							"                \"SymbolOnLeft\",\r",
							"                \"SpaceBetweenAmountAndSymbol\",\r",
							"                \"RoundingCoefficient\",\r",
							"                \"DecimalDigits\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"Routes\",\r",
							"        \"Quotes\",\r",
							"        \"Places\",\r",
							"        \"Carriers\",\r",
							"        \"Currencies\"\r",
							"      ]\r",
							"    }\r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Results are localized\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    for (var i = 0; i < places.length; i++) {\r",
							"        var place = places[i];\r",
							"        pm.expect(place.CountryName).to.have.string('United States');\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-host",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com",
						"type": "text"
					},
					{
						"key": "x-rapidapi-key",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2",
						"type": "text"
					},
					{
						"key": "useQueryString",
						"value": "true",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/US/USD/en-US/SFO-sky/ORD-sky/2020-07-20?inboundpartialdate=2020-12-01",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"browseroutes",
						"v1.0",
						"US",
						"USD",
						"en-US",
						"SFO-sky",
						"ORD-sky",
						"2020-07-20"
					],
					"query": [
						{
							"key": "inboundpartialdate",
							"value": "2020-12-01"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Browse Dates",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "61f133a6-4554-498d-871c-0f5860fb0498",
						"exec": [
							"pm.test(\"Has status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function(){\r",
							"    pm.response.to.be.ok\r",
							"    pm.response.to.be.withBody\r",
							"    pm.response.to.be.json\r",
							"});\r",
							"\r",
							"pm.test(\"Has valid JSON schema\", function(){\r",
							"    var schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"Dates\":{\r",
							"            \"type\":\"object\",\r",
							"            \"properties\":{\r",
							"                \"Outbounddates\":{\r",
							"                    \"type\":\"array\",\r",
							"                    \"items\":{\r",
							"                        \"type\":\"object\"\r",
							"                    }\r",
							"                },\r",
							"                \"inboudnDates\":{\r",
							"                    \"type\":\"array\",\r",
							"                    \"items\":{\r",
							"                        \"type\":\"object\"\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"Quotes\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\"\r",
							"            }\r",
							"        },\r",
							"        \"Places\":{\r",
							"              \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                  \"type\":\"object\",\r",
							"            \"properties\":{\r",
							"                \"PlaceId\":{\r",
							"                     \"type\":\"integer\"\r",
							"                },\r",
							"                 \"IataCode\":{\r",
							"                      \"type\":\"string\"\r",
							"                },\r",
							"                 \"Name\":{\r",
							"                       \"type\":\"string\"\r",
							"                },\r",
							"                  \"Type\":{\r",
							"                       \"type\":\"string\"\r",
							"                },\r",
							"                  \"SkyscannerCode\":{\r",
							"                        \"type\":\"string\"\r",
							"                },\r",
							"                   \"CityName\":{\r",
							"                        \"type\":\"string\"\r",
							"                },\r",
							"                   \"CityId\":{\r",
							"                        \"type\":\"string\"\r",
							"                },\r",
							"                    \"CountryName\":{\r",
							"                         \"type\":\"string\"\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"\r",
							"      },\r",
							"      \"Carriers\":{\r",
							"          \"type\":\"array\",\r",
							"          \"items\":{\r",
							"              \"type\":\"object\",\r",
							"              \"properties\":{\r",
							"                  \"CarrierId\":{\r",
							"                      \"type\":\"integer\"\r",
							"                  },\r",
							"                  \"Name\":{\r",
							"                      \"type\":\"string\"\r",
							"                  }\r",
							"              }\r",
							"          }\r",
							"      },\r",
							"      \"Currencies\":{\r",
							"          \"type\":\"array\",\r",
							"          \"items\":{\r",
							"              \"type\":\"object\",\r",
							"              \"properties\":{\r",
							"                  \"Code\":{\r",
							"                      \"type\":\"string\"\r",
							"                  },\r",
							"                  \"Symbol\":{\r",
							"                      \"type\":\"string\"\r",
							"                  },\r",
							"                  \"ThousandsSeparator\":{\r",
							"                      \"type\":\"string\"\r",
							"                  },\r",
							"                  \"DecimalSeparator\":{\r",
							"                      \"type\":\"string\"\r",
							"                  },\r",
							"                  \"SymbolOnLeft\":{\r",
							"                      \"type\":\"boolean\"\r",
							"                  },\r",
							"                  \"SpaceBetweenAmountAndSymbol\":{\r",
							"                      \"type\":\"boolean\"\r",
							"                  },\r",
							"                  \"RoundingCoefficient\":{\r",
							"                      \"type\":\"integer\"\r",
							"                  },\r",
							"                  \"DecimalDigits\":{\r",
							"                      \"type\":\"integer\"\r",
							"                  }\r",
							"              }\r",
							"          }\r",
							"      }\r",
							"    }\r",
							"}\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Results are localized\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    for (var i = 0; i < places.length; i++) {\r",
							"        var place = places[i];\r",
							"        pm.expect(place.CountryName).to.have.string('United States');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Results are filtered by origin place\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    var place = places[1];\r",
							"pm.expect(place.IataCode).to.have.string('SFO');\r",
							"});\r",
							"\r",
							"pm.test(\"Results are filtered by destintaion place\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    var place = places[0];\r",
							"pm.expect(place.SkyscannerCode).to.have.string('LAX');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-key",
						"type": "text",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2"
					},
					{
						"key": "x-rapidapi-host",
						"type": "text",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com"
					},
					{
						"key": "useQueryString",
						"type": "text",
						"value": "true"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsedates/v1.0/US/USD/en-US/SFO-sky/LAX-sky/2020-07-20?inboundpartialdate=2020-12-01",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"browsedates",
						"v1.0",
						"US",
						"USD",
						"en-US",
						"SFO-sky",
						"LAX-sky",
						"2020-07-20"
					],
					"query": [
						{
							"key": "inboundpartialdate",
							"value": "2020-12-01"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Browse Date Inbound",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1db37cfb-7090-4502-a558-265d07c487db",
						"exec": [
							"pm.test(\"Has status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function(){\r",
							"    pm.response.to.be.ok\r",
							"    pm.response.to.be.withBody\r",
							"    pm.response.to.be.json\r",
							"});\r",
							"\r",
							"pm.test(\"Has valid JSON schema\", function(){\r",
							"    var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Dates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"OutboundDates\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {}\r",
							"        },\r",
							"        \"InboundDates\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {}\r",
							"        }\r",
							"      },\r",
							"      \"Quotes\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {}\r",
							"      },\r",
							"      \"Places\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {}\r",
							"      },\r",
							"      \"Carriers\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {}\r",
							"      },\r",
							"      \"Currencies\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": [\r",
							"          {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"Code\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"Symbol\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"ThousandsSeparator\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"DecimalSeparator\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"SymbolOnLeft\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"SpaceBetweenAmountAndSymbol\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"RoundingCoefficient\": {\r",
							"                \"type\": \"integer\"\r",
							"              },\r",
							"              \"DecimalDigits\": {\r",
							"                \"type\": \"integer\"\r",
							"              }\r",
							"            }\r",
							"          }\r",
							"        ]\r",
							"      }\r",
							"    }\r",
							"  }\r",
							"}\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-key",
						"type": "text",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2"
					},
					{
						"key": "x-rapidapi-host",
						"type": "text",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com"
					},
					{
						"key": "useQueryString",
						"type": "text",
						"value": "true"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsedates/v1.0/US/USD/en-US/SFO-sky/LAX-sky/2020-07-20/2020-08-01",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"browsedates",
						"v1.0",
						"US",
						"USD",
						"en-US",
						"SFO-sky",
						"LAX-sky",
						"2020-07-20",
						"2020-08-01"
					]
				}
			},
			"response": []
		},
		{
			"name": "Browse Quotes Inbound",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9a79bc59-c5c7-429a-9e0a-c1bea3f9cbaa",
						"exec": [
							"pm.test(\"Has status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function(){\r",
							"    pm.response.to.be.ok\r",
							"    pm.response.to.be.withBody\r",
							"    pm.response.to.be.json\r",
							"});\r",
							"\r",
							"pm.test(\"Has valid JSON schema\", function(){\r",
							"    var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"Quotes\": {\r",
							"           \"type\": \"array\",\r",
							"            \"items\": {}\r",
							"            },\r",
							"        \"Places\": {\r",
							"            \"type\": \"array\",\r",
							"             \"items\": [\r",
							"          {\r",
							"            \"type\": \"object\",\r",
							"             \"properties\": {\r",
							"                   \"PlaceId\": {\r",
							"                       \"type\": \"integer\"\r",
							"                   },\r",
							"                    \"IataCode\": {\r",
							"                       \"type\": \"string\"\r",
							"                   },\r",
							"                     \"Name\": {\r",
							"                       \"type\": \"string\"\r",
							"                    },\r",
							"                    \"Type\": {\r",
							"                       \"type\": \"string\"\r",
							"                   },\r",
							"                   \"SkyscannerCode\": {\r",
							"                        \"type\": \"string\"\r",
							"                   },\r",
							"                    \"CityName\": {\r",
							"                        \"type\": \"string\"\r",
							"                   },\r",
							"                    \"CityId\": {\r",
							"                       \"type\": \"string\"\r",
							"                    },\r",
							"                    \"CountryName\": {\r",
							"                           \"type\": \"string\"\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							" },\r",
							"   \"Carriers\": {\r",
							"          \"type\": \"array\",\r",
							"           \"items\": [\r",
							"          {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                    \"CarrierId\": {\r",
							"                        \"type\": \"integer\"\r",
							"                    },\r",
							"                     \"Name\": {\r",
							"                         \"type\": \"string\"\r",
							"                    }\r",
							"                }\r",
							"          \r",
							"            }\r",
							"        ]\r",
							"    },\r",
							"    \"Currencies\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"Code\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"Symbol\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"ThousandsSeparator\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"DecimalSeparator\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"SymbolOnLeft\": {\r",
							"              \"type\": \"boolean\"\r",
							"            },\r",
							"            \"SpaceBetweenAmountAndSymbol\": {\r",
							"              \"type\": \"boolean\"\r",
							"            },\r",
							"            \"RoundingCoefficient\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"DecimalDigits\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          }\r",
							"         }\r",
							"          ]\r",
							"},\r",
							"    \"Carriers\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"CarrierId\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"Name\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          }\r",
							"        }\r",
							"      ]\r",
							"    },\r",
							"    \"Currencies\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"Code\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"Symbol\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"ThousandsSeparator\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"DecimalSeparator\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"SymbolOnLeft\": {\r",
							"              \"type\": \"boolean\"\r",
							"            },\r",
							"            \"SpaceBetweenAmountAndSymbol\": {\r",
							"              \"type\": \"boolean\"\r",
							"            },\r",
							"            \"RoundingCoefficient\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"DecimalDigits\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          }\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  }\r",
							"\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Results are localized\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    for (var i = 0; i < places.length; i++) {\r",
							"        var place = places[i];\r",
							"        pm.expect(place.CountryName).to.have.string('United States');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Results are filtered by origin place\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    var place = places[1];\r",
							"pm.expect(place.IataCode).to.have.string('SFO');\r",
							"});\r",
							"\r",
							"pm.test(\"Results are filtered by destination place\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    var places = jsonData.Places;\r",
							"\r",
							"    var place = places[0];\r",
							"pm.expect(place.SkyscannerCode).to.have.string('LAX');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-key",
						"type": "text",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2"
					},
					{
						"key": "x-rapidapi-host",
						"type": "text",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com"
					},
					{
						"key": "useQueryString",
						"type": "text",
						"value": "true"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/USD/en-US/SFO-sky/LAX-sky/2020-07-20/2020-08-01",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"browsequotes",
						"v1.0",
						"US",
						"USD",
						"en-US",
						"SFO-sky",
						"LAX-sky",
						"2020-07-20",
						"2020-08-01"
					]
				}
			},
			"response": []
		},
		{
			"name": "Browse Routes Inbound",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f34fbe7a-2eea-4cbd-a844-666ee3d70345",
						"exec": [
							"pm.test(\"Has status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function(){\r",
							"    pm.response.to.be.ok\r",
							"    pm.response.to.be.withBody\r",
							"    pm.response.to.be.json\r",
							"});\r",
							"\r",
							"pm.test(\"Has valid JSON schema\", function(){\r",
							"    var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"       \"Routes\": {\r",
							"             \"type\": \"array\",\r",
							"             \"items\": {}\r",
							"                   },\r",
							"       \"Quotes\": {\r",
							"              \"type\": \"array\",\r",
							"               \"items\": [\r",
							"            {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                   \"QuoteId\": {\r",
							"                       \"type\": \"integer\"\r",
							"                         },\r",
							"                   \"MinPrice\": {\r",
							"                         \"type\": \"number\"\r",
							"                        },\r",
							"                  \"Direct\": {\r",
							"                        \"type\": \"boolean\"\r",
							"                       },\r",
							"                  \"OutboundLeg\": {\r",
							"                       \"type\": \"object\",\r",
							"                       \"properties\": {\r",
							"                            \"CarrierIds\": {\r",
							"                                \"type\": \"array\",\r",
							"                                 \"items\": [\r",
							"                                      {\r",
							"                                   \"type\": \"integer\"\r",
							"                                      }\r",
							"                                          ]\r",
							"                                       },\r",
							"                            \"OriginId\": {\r",
							"                                 \"type\": \"integer\"\r",
							"                                        },\r",
							"                            \"DestinationId\": {\r",
							"                                  \"type\": \"integer\"\r",
							"                                        },\r",
							"                           \"DepartureDate\": {\r",
							"                                  \"type\": \"string\"\r",
							"                                       }\r",
							"                                      }\r",
							"                                 },\r",
							"                 \"InboundLeg\": {\r",
							"                     \"type\": \"object\",\r",
							"                     \"properties\": {\r",
							"                         \"CarrierIds\": {\r",
							"                             \"type\": \"array\",\r",
							"                             \"items\": {\r",
							"                               \"type\": \"integer\"\r",
							"                                 }                 \r",
							"                              },\r",
							"                          \"OriginId\": {\r",
							"                              \"type\": \"integer\"\r",
							"                             },\r",
							"                           \"DestinationId\": {\r",
							"                                 \"type\": \"integer\"\r",
							"                                       },\r",
							"                           \"DepartureDate\": {\r",
							"                                  \"type\": \"string\"\r",
							"                                     }\r",
							"                                   }\r",
							"                                }\r",
							"                   },\r",
							"                \"QuotesDateTime\":{\r",
							"                        \"type\":\"string\"\r",
							"                    }\r",
							"                  }\r",
							"                ]\r",
							"              },\r",
							"\r",
							"        \"Places\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"PlaceId\":{\r",
							"                        \"type\":\"integer\"\r",
							"                        },\r",
							"                        \"IataCode\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"Name\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"Type\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"SkyscannerCode\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"CityName\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"CityId\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                        \"CountryName\":{\r",
							"                        \"type\":\"string\"\r",
							"                        }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"Carriers\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"CarrierId\":{\r",
							"                        \"type\":\"integer\"\r",
							"                    },\r",
							"                    \"Name\":{\r",
							"                        \"type\":\"string\"\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        },\r",
							"        \"Currencies\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"Code\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                    \"Symbol\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                    \"ThousandsSeparator\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                    \"DecimalSeparator\":{\r",
							"                        \"type\":\"string\"\r",
							"                        },\r",
							"                    \"SymbolOnLeft\":{\r",
							"                        \"type\":\"boolean\"\r",
							"                        },\r",
							"                    \"SpaceBetweenAmountAndSymbol\":{\r",
							"                        \"type\":\"boolean\"\r",
							"                        },\r",
							"                    \"RoundingCoefficient\":{\r",
							"                        \"type\":\"integer\"\r",
							"                        },\r",
							"                    \"DecimalDigits\":{\r",
							"                        \"type\":\"integer\"\r",
							"                        }\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"      }\r",
							"    }\r",
							"            \r",
							"          \r",
							"     pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-key",
						"type": "text",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2"
					},
					{
						"key": "x-rapidapi-host",
						"type": "text",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com"
					},
					{
						"key": "useQueryString",
						"type": "text",
						"value": "true"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/US/USD/en-US/SFO-sky/LAX-sky/2020-07-20/2020-08-01",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"browseroutes",
						"v1.0",
						"US",
						"USD",
						"en-US",
						"SFO-sky",
						"LAX-sky",
						"2020-07-20",
						"2020-08-01"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Markets",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5620ea9d-0a17-41ff-994f-a7c886f60aca",
						"exec": [
							"pm.test(\"Has status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function(){\r",
							"    pm.response.to.be.ok\r",
							"    pm.response.to.be.withBody\r",
							"    pm.response.to.be.json\r",
							"});\r",
							"\r",
							"pm.test(\"Has valid JSON schema\", function(){\r",
							"    var schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"country\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\r",
							"                \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"code\":{\r",
							"                        \"type\":\"string\"\r",
							"                    },\r",
							"                    \"Name\":{\r",
							"                        \"type\":\"string\"\r",
							"                    }\r",
							"                }\r",
							"            }\r",
							"        \r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-key",
						"type": "text",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2"
					},
					{
						"key": "x-rapidapi-host",
						"type": "text",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com"
					},
					{
						"key": "useQueryString",
						"type": "text",
						"value": "true"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/countries/en-US",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"reference",
						"v1.0",
						"countries",
						"en-US"
					]
				}
			},
			"response": []
		},
		{
			"name": "Currencies",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2ffd0a49-5ef8-4b4d-8e77-1ad5bf88b666",
						"exec": [
							"pm.test(\"Has status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns JSON\", function(){\r",
							"    pm.response.to.be.ok\r",
							"    pm.response.to.be.withBody\r",
							"    pm.response.to.be.json\r",
							"});\r",
							"\r",
							"pm.test(\"Has valid JSON schema\", function(){\r",
							"    var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"Currencies\": {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": [\r",
							"          {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"Code\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"Symbol\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"ThousandsSeparator\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"DecimalSeparator\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"SymbolOnLeft\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"SpaceBetweenAmountAndSymbol\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"RoundingCoefficient\": {\r",
							"                \"type\": \"integer\"\r",
							"              },\r",
							"              \"DecimalDigits\": {\r",
							"                \"type\": \"integer\"\r",
							"              }\r",
							"            }\r",
							"            \r",
							"          }\r",
							"        ]\r",
							"      }\r",
							"    }\r",
							"    \r",
							"  }\r",
							"\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-rapidapi-key",
						"type": "text",
						"value": "28a8eeac5amsh9b4389145413b3cp16f940jsn4dba148f37a2"
					},
					{
						"key": "x-rapidapi-host",
						"type": "text",
						"value": "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com"
					},
					{
						"key": "useQueryString",
						"type": "text",
						"value": "true"
					}
				],
				"url": {
					"raw": "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/reference/v1.0/currencies",
					"protocol": "https",
					"host": [
						"skyscanner-skyscanner-flight-search-v1",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"apiservices",
						"reference",
						"v1.0",
						"currencies"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}